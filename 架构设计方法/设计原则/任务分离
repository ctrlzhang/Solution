任务分离
- 比如说, 我们要识别一组图片, 它包括两个步骤,1-上传图片 2-识别图片， 那么上传图片和识别图片需要分离
- 为什么？
- 因为, 如果图片上传成功, 识别失败时, 我们不希望重复上传. 你可能会说我在代码里判断一下就可以了, 比如我可以判断下是不是图片已经上传过了，这样做是可以的, 但是有没有发现, 这段代码的错误逻辑
处理逻辑就会变得复杂起来, 比如你要考虑图片失败之后, 你是立即重传还是入队等会再上传.
总之,将来维护的时候是需要留意这些代码的, 随着考虑的case越来越多，代码越来越复杂. 总之我是看到了, 将来这里肯定会变复杂.

- 如果我们把这两个步骤分开, 那么上传就focus在上传这块, 识别就专注识别. 但是这里有个依赖关系, 因为识别前必须保证图片上传成功了. 如何解决这个依赖关系? 
如果我们不分开这两个步骤，那么依赖关系式代码自己保证的, 因为是先后执行, 显然这种方法很简单, 也容易实现, 但是我们需要考虑它能不能满足业务需求
如果分开, 我们就需要创建依赖关系，总之要想个办法, 让识别图片的程序可以知道图片的状态. 比如说提供的接口让我查下, 或者提供个topic让我监听下, 等等

分开的好处
- 代码分散了，单元测试好写，职责清晰，我可以交给不同的项目组去负责模块
- 上传逻辑可以作为公共服务，我们可以把它优化的非常好
- 识别逻辑可以作为公共服务，我们同样可以把它优化的非常好
- 两者拆开后, 变成了两个独立的个体, 我们一个可以用Java写，一个可以用个python写, 解耦了实现逻辑
- 灵活

分开的坏处
- 复杂度还是提升了，不过是设计层面的, 因为需要建立感知机制
- 异常的处理
